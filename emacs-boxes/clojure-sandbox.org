# -*- mode: Org -*-
#+TITLE: init sandbox
#+DATE: Wed Nov 15 18:27:36 2017
#+STARTUP: hidestars indent overview

*Emacs executable*
#+NAME: emacs-bin
#+BEGIN_SRC elisp :tangle no 
(concat invocation-directory "/" invocation-name)
#+END_SRC

*Emacs init file path*
#+NAME: file-path
#+BEGIN_SRC elisp :tangle no :results value
(concat (file-name-sans-extension (buffer-file-name)) ".el")
#+END_SRC

*Set tangled file Elisp extension*
#+PROPERTY: header-args :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")

*Get frame title*
#+NAME: title
#+BEGIN_SRC emacs-lisp :tangle no :result value 
(org-no-properties (car (plist-get (org-export-get-environment) ':title)))
#+END_SRC

*Launch Emacs to test config*
#+NAME: launch
#+HEADER: :var EMACS_BIN=emacs-bin
#+HEADER: :var FILE_PATH=(concat (file-name-sans-extension (buffer-file-name)) ".el")
#+BEGIN_SRC elisp  :results silent :tangle no :dir (file-name-directory (buffer-file-name)) :noweb eval
;; (call-process EMACS_BIN nil 0 nil "-Q" "-l" <<file-path>>) ; not load `user-emacs-directory'
   (async-shell-command (concat EMACS_BIN " -Q -l " FILE_PATH))
#+END_SRC

*Generate shell script*
#+BEGIN_SRC shell :eval no :tangle (concat (file-name-sans-extension (buffer-file-name)) ".sh") :tangle-mode (identity #o755) :noweb tangle :shebang "#!/bin/zsh"
  <<emacs-bin()>> -Q -l <<file-path()>>
#+END_SRC

* TODO [0/1]
- [ ] not close started emacs when host emacs quits
  https://oremacs.com/2015/01/04/dired-nohup/

* main configuration
#+NAME: main-config
#+BEGIN_SRC emacs-lisp
  ;; default emacs directory: current directory
  (setq user-emacs-directory (expand-file-name "./.emacs.d/"))

  (require 'package)
  (setq package-user-dir (concat user-emacs-directory "var/lisp"))
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ;;("marmalade" . "http://marmalade-repo.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
  (package-refresh-contents)

  ;; install `use-package'
  (when (not (package--user-selected-p 'use-package))
    (package-install 'use-package))
#+END_SRC
* system configuration
#+NAME: system-config
#+BEGIN_SRC emacs-lisp :noweb tangle
  ;;; system configuration 
  (when (memq window-system '(mac ns))
    ;; set meta and clipboard
    (setq mac-option-modifier nil
          mac-command-modifier 'meta
          x-select-enable-clipboard t))

  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
                 :ensure t
                 :config
                 (exec-path-from-shell-initialize)))


  ;;;; frames
  (setq frame-title-format '("<<title()>> - " "%b"))

#+END_SRC
* user configuration
** backup
#+NAME: backup-config
#+BEGIN_SRC emacs-lisp
  ;; init
  (when (not (file-directory-p (concat user-emacs-directory "var/auto-save-list/")))
    (make-directory (concat user-emacs-directory "var/auto-save-list/")))
  (when (not (file-directory-p (concat user-emacs-directory "var/backups/")))
    (make-directory (concat user-emacs-directory "var/backups/")))

  ;;config
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "var/backups")))
        delete-old-versions t
        version-control t
        vc-make-backup-files t
        auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "var/auto-save-list/") t)))
#+END_SRC
** basic
#+NAME: user-config
#+BEGIN_SRC emacs-lisp
  ;;; user config

  ;;;; hide bars
  (menu-bar-mode 0)
  (tool-bar-mode 0)

  ;;;; hide scrollbars
  (scroll-bar-mode 0)

  ;;;; no bell ring
  (setq ring-bell-function 'ignore)

  ;;;; C-n add new line when is at bottom
  (setq next-line-add-newlines t)

  ;;;; Closing
  (defun ask-before-closing ()
    "Ask whether or not to close, and then close if y was pressed"
    (interactive)
    (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
        (save-buffers-kill-emacs)
      (message "Canceled exit")))

  ;;;; coding system
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")

  ;;;; modeline 
  ;; time
  (setq display-time-day-and-date nil
        display-time-24hr-format t
        display-time-default-load-average nil)
  ;; show file size 
  (size-indication-mode t)
  ;; show cursor position
  (setq column-number-mode t)
  (setq line-number-mode t)

  ;;;; spaces and tabs
  ;; whitespaces
  (require 'whitespace)
  (add-hook 'prog-mode-hook '(lambda () (setq show-trailing-whitespace t)))

  ;; no tabs, only spaces
  (setq-default indent-tabs-mode nil)

  ;;;; performance
  ;; better performance
  (setq gc-cons-threshold 10000000)

  ;;;; recentf
  (require 'recentf)
  (setq recentf-max-menu-items 100000)
  (setq recentf-max-saved-items nil)
  (setq recentf-auto-cleanup 'never)
  (setq recentf-save-file (concat user-emacs-directory "var/recentf"))
  (add-to-list 'recentf-exclude "var/lisp")
  (add-to-list 'recentf-exclude "var/bookmarks")
  (add-to-list 'recentf-exclude "^/usr/local\\.*")

  ;; https://www.reddit.com/r/emacs/comments/21a4p9/use_recentf_and_ido_together/
  ;; (defun recentf-ido-find-file ()
  ;;   "Use ido to select a recently opened file from the `recentf-list'"
  ;;   (interactive)
  ;;   (find-file
  ;;    (ido-completing-read "Recentf open: "
  ;;                         (mapcar 'abbreviate-file-name recentf-list)
  ;;                         nil t)))
  (recentf-mode 1)

  ;;;; persistent history
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)
        savehist-file (concat user-emacs-directory "var/history")
        kill-ring-max 1000)
  (setq-default history-length 1000)
  (savehist-mode 1)

#+END_SRC
** bookmarks
#+NAME: bookmarks-config
#+BEGIN_SRC emacs-lisp
  ;;;; bookmarks
  ;; `bookmark+'
  (add-to-list 'load-path (concat user-emacs-directory "var/lisp/bookmark+"))
  ;;init
  ;; install 'bookmark+' files if necessary
  (when (not (file-directory-p (concat user-emacs-directory "var/lisp/bookmark+")))
    (let ((dir (concat user-emacs-directory "var/lisp/bookmark+"))
          (urls '("https://www.emacswiki.org/emacs/download/bookmark%2b.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-mac.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-bmu.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-1.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-key.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-lit.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-doc.el"
                  "https://www.emacswiki.org/emacs/download/bookmark%2b-chg.el"))
          (old-buffer (current-buffer))
          (buffer-name "*bmkp+-temp-buffer*")
          filename)
      (make-directory dir)
      (get-buffer-create buffer-name)
      (save-excursion
       (set-buffer buffer-name)
       (dolist (url urls)
         (setq filename (concat dir "/" (file-name-nondirectory (url-unhex-string
                                                                 (url-filename
                                                                  (url-generic-parse-url url))))))
         (delete-region (point-min) (point-max))
         (url-insert-file-contents url)
         (write-region (point-min) (point-max) filename))
       (set-buffer old-buffer))))

  ;;config
  (setq bookmark-default-file (concat user-emacs-directory "var/bookmarks/main.bmk") ;; # TODO
        bmkp-bmenu-state-file (concat user-emacs-directory "var/bookmarks/emacs-bmk-state-file.el")
        bmkp-last-bookmark-file (concat user-emacs-directory "var/bookmarks/main.bmk")
        bmkp-current-bookmark-file (concat user-emacs-directory "var/bookmarks/main.bmk"))

  (require 'bookmark+)

  ;;(setq bookmark-save-flag nil)
  (setq bookmark-save-flag 1)
  (setq bookmark-version-control t) ;; <2015-01-11 Sun>
#+END_SRC
** bookmarks clojure
#+BEGIN_SRC emacs-lisp
  ;;;; bookmarks
  (defun lein-tutorial ()
    "Lein tutorial"
    (let ((buffer-name "Lein-tutorial.md"))
      (shell-command "lein help tutorial" buffer-name)
      (switch-to-buffer buffer-name)
      (markdown-mode)))
#+END_SRC
** browser
#+NAME: browser-config
#+BEGIN_SRC emacs-lisp
  ;;;; browser config
  (eval-after-load "eww"
    '(progn (define-key eww-mode-map "f" 'eww-lnum-follow)
      (define-key eww-mode-map "F" 'eww-lnum-universal)))

  (add-hook 'eww-after-render-hook (lambda ()
                                     (rename-buffer (concat "eww - "
                                                            (plist-get eww-data :title))
                                                    t)))

  (use-package eww-lnum
               :ensure t)
#+END_SRC
** comments
#+NAME: comments-config
#+BEGIN_SRC emacs-lisp
  (use-package outshine
    :ensure t
    :config

    (add-hook 'outline-minor-mode-hook 'outshine-mode)
    (add-hook 'clojure-mode-hook 'outline-minor-mode))

  (use-package poporg
    :ensure t
    :config)
#+END_SRC
** completition
#+BEGIN_SRC emacs-lisp
  ;;;; completition

  (use-package company
    :ensure t
    :diminish company-mode
    :bind (("M-/" . company-complete)
           ("<backtab>" . company-yasnippet)
           :map company-active-map
           ("C-p" . company-select-previous)
           ("C-n" . company-select-next)
           ("<tab>" . company-complete-common-or-cycle)
           ;; ("<backtab>" . my-company-yasnippet)
           ;; ("C-c C-y" . my-company-yasnippet)
           :map company-search-map
           ("C-p" . company-select-previous)
           ("C-n" . company-select-next))
    :config
    (setq company-idle-delay 0.01  ;; 0.3
          company-show-numbers t
          company-tooltip-limit 10
          company-tooltip-align-annotations t
          company-minimum-prefix-length 2
          company-selection-wrap-around t
          company-selection-changed t
          company-tooltip-flip-when-above nil
          company-require-match nil
          company-quickhelp-max-lines 60
          company-dabbrev-downcase nil ;; case-replace
          company-dabbrev-ignore-case t
          company-dabbrev-code-ignore-case t
          company-dabbrev-code-everywhere t
          company-dabbrev-other-buffers nil
          pos-tip-border-width 0)
    (setq company-backends
          (mapcar
           (lambda (backend)
             (if (and (listp backend) (member 'company-yasnippet backend))
                 backend
               (append (if (consp backend) backend (list backend))
                       '(:with company-yasnippet))))
           company-backends))

    ;; :bind (:map company-active-map
    ;;             ("C-n" . company-select-next)
    ;;             ("C-p" . company-select-previous)
    ;;             ("C-d" . company-show-doc-buffer)
    ;;             ("M-." . company-show-location))

    ;; (define-key company-active-map (kbd "\C-n") 'company-select-next)
    ;; (define-key company-active-map (kbd "\C-p") 'company-select-previous)
    ;; (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
    ;; (define-key company-active-map (kbd "M-.") 'company-show-location)

    (global-company-mode 1))

  ;; (use-package company
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'after-init-hook 'global-company-mode)
  ;;   (setq company-idle-delay 0.01  ;; 0.3
  ;;         company-show-numbers t
  ;;         company-tooltip-limit 10
  ;;         company-tooltip-align-annotations t
  ;;         company-minimum-prefix-length 2
  ;;         company-selection-wrap-around t
  ;;         company-selection-changed t
  ;;         company-tooltip-flip-when-above nil
  ;;         company-require-match nil
  ;;         company-quickhelp-max-lines 60
  ;;         pos-tip-border-width 0))

  (use-package company-posframe
    :ensure t
    :config
    (company-posframe-mode 1))
#+END_SRC
** fonts & faces
#+BEGIN_SRC emacs-lisp
  ;;;; fonts & faces
  ;; set big font in iMac 27"
  (defun pedro-big-buffer-face ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Hack" :height 250))
    (buffer-face-mode))

  (when (string= system-name "zLusco")
    ;;(set-frame-font "Hack 22" t t)     
    (set-frame-font "Hack 17" t t)
    (add-to-list 'default-frame-alist (cons 'width 130))
    (add-to-list 'default-frame-alist (cons 'height 200))

    ;; big buffer font
    (add-hook 'clojure-mode-hook 'pedro-big-buffer-face)
    (add-hook 'cider-repl-mode-hook 'pedro-big-buffer-face)
    (add-hook 'eww-mode-hook 'pedro-big-buffer-face)
    (add-hook 'org-mode-hook 'pedro-big-buffer-face))
#+END_SRC
** folding
#+BEGIN_SRC emacs-lisp
  (use-package origami
               :config
               (add-hook 'clojure-mode-hook 'origami-mode)
               :ensure t)
#+END_SRC
** help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
               :config
               (setq which-key-sort-order 'which-key-key-order-alpha
                     which-key-side-window-max-height 10)
               (which-key-mode)
               (which-key-setup-side-window-right-bottom)
               :diminish which-key-mode
               :ensure t)

  (use-package discover-my-major
    :config
    (global-unset-key (kbd "C-h h")) ; original "C-h h" displays "hello world" in different languages
    (define-key 'help-command (kbd "h m") 'discover-my-major)
    :ensure t)

  ;; (use-package ido-describe-bindings
  ;;   :ensure t
  ;;   :config)
#+END_SRC
** hydra & hydras
#+BEGIN_SRC emacs-lisp
  ;;;; hydra
  (use-package hydra
               :ensure t
               :config
               (setq lv-use-separator t))

  ;;;; hydras
  (defhydra hydra-folding ()
    "folding"
    ("C" origami-close-all-nodes "close all")
    ("O" origami-open-all-nodes "open all")
    ("c" origami-close-node "close")
    ("o" origami-open-node "open"))

  (defhydra hydra-go (:exit t)
    "go"
    ("e" (lambda () (interactive) (eshell current-prefix-arg)) "eshell")
    ("s" (lambda () "switch to *scratch* buffer" (interactive) (switch-to-buffer "*scratch*")) "*scratch*"))


  ;; (defhydra hydra-keys (:exit t)
  ;;   "keys"
  ;;   ("i" ido-describe-bindings "ido desc bind"))

  (defhydra hydra-clojure-refactor (:exit t :hint nil)
    ""
    ("h"  (hydra-cljr-help-menu/body) "help" exit t)
    ("n"  (hydra-cljr-ns-menu/body) "ns" :exit t) 
    ("c"  (hydra-cljr-code-menu/body) "code" :exit t)
    ("p"  (hydra-cljr-project-menu/body) "project")
    ("t"  (hydra-cljr-toplevel-form-menu/body) "toplevel" :exit t)
    ("s"  (hydra-cljr-cljr-menu/body) "self" :exit t))

#+END_SRC
** indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (add-hook 'clojure-mode-hook #'aggressive-indent-mode))

#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
  ;;;; keybindings
  (global-unset-key (kbd "M-m"))

  (global-set-key (kbd "C-x C-c") 'ask-before-closing)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-x o") 'other-frame)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-c k") 'browse-kill-ring)
  ;; (global-set-key (kbd "C-c f") 'recentf-ido-find-file) 

  (use-package bind-key
               :config
               (bind-keys*
                ("M-m m" . er/expand-region)
                ("M-m =" . indent-region)
                ("M-m w" . delete-trailing-whitespace)
                ("C-0" . (lambda () (interactive) (persp-switch "0")))
                ("C-1" . (lambda () (interactive) (persp-switch "1")))
                ("C-2" . (lambda () (interactive) (persp-switch "2")))
                ("C-3" . (lambda () (interactive) (persp-switch "3")))
                ("C-4" . (lambda () (interactive) (persp-switch "4")))
                ("C-5" . (lambda () (interactive) (persp-switch "5")))
                ("C-6" . (lambda () (interactive) (persp-switch "6")))
                ("C-7" . (lambda () (interactive) (persp-switch "7")))
                ("C-8" . (lambda () (interactive) (persp-switch "8")))
                ("C-9" . (lambda () (interactive) (persp-switch "9")))
                ;; clojure
                ("M-m c r" . hydra-clojure-refactor/body)

                ;; folding
                ("M-m f" . hydra-folding/body)

                ;; go
                ("M-m g" . hydra-go/body)

                ;; keys
                ("M-m k" . hydra-keys/body)

                ;; outorg comments
                ("M-m o" . poporg-dwim)

                ;; deft
                ("M-m d" . deft)))
#+END_SRC
** mode-line
#+NAME: mode-line-config
#+BEGIN_SRC emacs-lisp
  ;;;; mode-line
  (use-package doom-modeline
    :ensure t
    :config (doom-modeline-init))

#+END_SRC
** org-mode
#+NAME: org-mode
#+BEGIN_SRC emacs-lisp
  ;;;; org-mode
  (use-package org
    :ensure t
    :ensure org-plus-contrib
    :pin org
    :config
    (define-key global-map "\C-cl" 'org-store-link)
    (setq org-src-window-setup 'current-window)
    (setq org-log-into-drawer t)
    (setq org-indent-mode t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (java . t)
       (lisp . t)
       (clojure . t)))
    (setq org-todo-keywords '((sequence "TODO" "STARTED" "WAITING" "|" "DONE" "ABORTED" "STOPPED")))
    (setq org-todo-keyword-faces '(("TODO" . (:foreground "#4169e1" :weight bold))
                                   ("STARTED" . (:foreground "dark orange" :weight bold))
                                   ("CURRENT" . (:foreground "#00bfff" :weight bold))
                                   ("WAITING" . (:foreground "#cd2626" :weight bold))
                                   ("DONE" . (:foreground "green4" :weight bold))
                                   ("ABORTED" . (:foreground "gray" :weight bold))
                                   ("STOPPED" . (:foreground "#d3d3d3" :weight bold)))))

#+END_SRC
** project
#+NAME: projectile
#+BEGIN_SRC emacs-lisp
  ;;;; projectile
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    ;; (setq projectile-project-search-path "~/dev/computer/clojure")  

    (setq projectile-buffers-filter-function 'pedro/projectile-filter-buffers
          pedro/projectile-filter-modes '("ibuffer-mode" "magit-log-mode" "magit-status-mode"
                                          "magit-process-mode" "magit-diff-mode" "eshell-mode")
          pedro/projectile-filter-buffers '("Flycheck" "dir-locals.el" "tern-project"))

    (defun pedro/projectile-filter-buffers (buffers)
      (cl-remove-if (lambda (b)
                      (or (member (symbol-name (with-current-buffer (buffer-name b) major-mode))
                                  pedro/projectile-filter-modes)
                          (cl-find-if (lambda (r)
                                        (string-match r (buffer-name b)))
                                      pedro/projectile-filter-buffers)))
                    buffers)))
#+END_SRC

** speed packages
#+BEGIN_SRC emacs-lisp
  ;;;; speed packages
  ;; (use-package ido
  ;;   :ensure t
  ;;   :config
  ;;   (setq ido-enable-flex-matching t)
  ;;   (setq ido-everywhere t)
  ;;   (setq ido-use-faces t)
  ;;   (setq ido-default-buffer-method 'selected-window)
  ;;   (ido-mode 1))

  ;; (use-package ido-vertical-mode
  ;;   :ensure t
  ;;   :config
  ;;   (ido-vertical-mode 1)
  ;;   (setq ido-vertical-define-keys 'ido-vertical-define-keys))

  ;; (use-package flx-ido
  ;;   :ensure t
  ;;   :config
  ;;   (ido-mode 1)
  ;;   (ido-everywhere 1)
  ;;   (flx-ido-mode 1)
  ;;   ;; disable ido faces to see flx highlights.
  ;;   (setq ido-enable-flex-matching t)
  ;;   (setq ido-use-faces nil))

  ;; (use-package smex
  ;;              :ensure t
  ;;              :config
  ;;              (smex-initialize)
  ;;              (global-set-key (kbd "M-x") 'smex)
  ;;              (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;;              ;; This is your old M-x.
  ;;              (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))

  (use-package avy
               :ensure t  
               :config
               (global-set-key (kbd "C-c SPC") 'avy-goto-char-timer)
               (add-hook 'org-mode-hook
                         (lambda ()
                           (local-set-key (kbd "\C-c SPC") 'avy-goto-char-timer))))

  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    (show-smartparens-global-mode t)
    ;; keybindings
    (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
    (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)
    (define-key smartparens-mode-map (kbd "M-(") 'sp-wrap-round)
    (define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-M-ñ") 'sp-forward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
    (define-key smartparens-mode-map (kbd "C-j") 'sp-forward-barf-sexp)
    (define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
    (define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)
    :ensure t)
#+END_SRC
** themes
#+NAME: themes-config
#+BEGIN_SRC emacs-lisp
  ;;;; themes
  (use-package color-theme-sanityinc-solarized
               :ensure t
               :config
               (load-theme 'sanityinc-solarized-dark t))
#+END_SRC
** undo
#+NAME: undo-config
#+BEGIN_SRC emacs-lisp
  ;;;; undo, kill, paste
  (use-package undo-tree
               :config
               (setq undo-tree-visualizer-timestamps t)
               (setq undo-tree-visualizer-diff t)
               (global-undo-tree-mode)
               :diminish undo-tree-mode
               :ensure t)

  (use-package browse-kill-ring
               :ensure t)
#+END_SRC
** various
#+NAME: various-config
#+BEGIN_SRC emacs-lisp
  (use-package beacon
               :ensure t
               :config
               (beacon-mode +1))

  (use-package vi-tilde-fringe
    :ensure t
    :diminish vi-tilde-fringe-mode
    :config
    (global-vi-tilde-fringe-mode nil))
#+END_SRC
** versioning
#+NAME: versioning-config
#+BEGIN_SRC emacs-lisp
  ;;;; versioning
  (use-package magit
               :config
               (global-set-key (kbd "C-x g") 'magit-status)
               :ensure t)
#+END_SRC
** windows
#+BEGIN_SRC emacs-lisp
  ;;;; windows
  (use-package zoom
               :config
               (zoom-mode 1)
               :diminish zoom-mode
               :ensure t)
  (use-package zoom-window
               :config
               (setq zoom-window-mode-line-color "#ffdead") ; "#a2cd5a")
               :bind ("C-x C-z" . zoom-window-zoom)
               :ensure t)

  (use-package window-numbering
               :config
               (setq window-numbering-assign-func
                     (lambda () (when (equal (buffer-name) "*Calculator*") 9)))
               (window-numbering-mode 1)
               :ensure t)

  (use-package winner
               :config
               (winner-mode 1)
               (windmove-default-keybindings 'meta)
               (global-set-key (kbd "C-M-h") 'winner-undo)
               (global-set-key (kbd "C-M-l") 'winner-redo))
#+END_SRC
** workspaces
#+NAME: workspaces
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (setq persp-initial-frame-name "1")
    (set-face-attribute 'persp-selected-face nil  :foreground "#4876ff" :underline t)
    (persp-mode)
    (global-set-key (kbd "C-x C-b") 'persp-ibuffer)
    (global-set-key (kbd "C-x b") 'persp-ivy-switch-buffer))

  ;; (use-package eyebrowse
  ;;     :ensure t
  ;;     ;; :bind (("C-c C-w C-w" . eyebrowse-last-window-config)
  ;;     ;;        ("C-c C-w C-h" . eyebrowse-prev-window-config)
  ;;     ;;        ("C-c C-w C-l" . eyebrowse-next-window-config))
  ;;     :config
  ;;     (add-to-list 'window-persistent-parameters '(window-side . writable))
  ;;     (add-to-list 'window-persistent-parameters '(window-slot . writable))
  ;;     (set-face-attribute 'eyebrowse-mode-line-active nil :foreground "#d2691e" :weight 'bold)
  ;;     (set-face-attribute 'eyebrowse-mode-line-inactive nil :foreground "#000000")
  ;;     (setq eyebrowse-mode-line-separator " ")

  ;;     (eyebrowse-mode t))
#+end_src

* packages configuration
#+NAME: packages-config
#+BEGIN_SRC emacs-lisp
  ;;; packages 
  (use-package clojure-mode-extra-font-locking
    :ensure t)

  (use-package cider
    :config
    ;; http://fgiasson.com/blog/index.php/2016/06/14/my-optimal-gnu-emacs-settings-for-developing-clojure-revised/
    (add-hook 'clojure-mode-hook '(lambda () (local-unset-key (kbd "\C-c SPC"))))
    (add-hook 'clojure-mode-hook 'cider-mode)
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    ;; tests
    (setq cider-test-show-report-on-success t)
    ;; Replace return key with newline-and-indent when in cider mode.
    (add-hook 'cider-mode-hook '(lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
    ;; history and logs
    (setq cider-repl-history-file (concat user-emacs-directory "var/cider-repl-history"))
    (setq nrepl-log-messages t)
    :ensure t)

  (use-package clj-refactor
    :ensure t
    :config
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))

    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))

  ;; (use-package cider-hydra
  ;;   :ensure t)

  (use-package pdf-tools
    :config
    (pdf-tools-install)
    ;; http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/
    (setq pdf-view-resize-factor 1.1)


    ;; around way to handler pdf bookmarks ;FIXME
    ;; chage 'pdf-view-bookmark-jump-handler' to 'pdf-view-bookmark-jump'
    (defun pdf-view-bookmark-make-record  (&optional no-page no-slice no-size no-origin)
      ;; TODO: add NO-PAGE, NO-SLICE, NO-SIZE, NO-ORIGIN to the docstring.
      "Create a bookmark PDF record. The optional, boolean args exclude certain attributes."
      (let ((displayed-p (eq (current-buffer)
                             (window-buffer))))
        (cons (buffer-name)
              (append (bookmark-make-record-default nil t 1)
                      `(,(unless no-page
                           (cons 'page (pdf-view-current-page)))
                        ,(unless no-slice
                           (cons 'slice (and displayed-p
                                             (pdf-view-current-slice))))
                        ,(unless no-size
                           (cons 'size pdf-view-display-size))
                        ,(unless no-origin
                           (cons 'origin
                                 (and displayed-p
                                      (let ((edges (pdf-util-image-displayed-edges nil t)))
                                        (pdf-util-scale-pixel-to-relative
                                         (cons (car edges) (cadr edges)) nil t)))))
                        (handler . pdf-view-bookmark-jump))))))


    ;; http://babbagefiles.blogspot.com.es/2017/11/more-pdf-tools-tricks.html
    ;; midnite mode hook
    (add-hook 'pdf-view-mode-hook (lambda ()
                                    (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs

    (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; set the amber profile as default (see below)

    (defun bms/pdf-no-filter ()
      "View pdf without colour filter."
      (interactive)
      (pdf-view-midnight-minor-mode -1)
      )

    ;; change midnite mode colours functions
    (defun bms/pdf-midnite-original ()
      "Set pdf-view-midnight-colors to original colours."
      (interactive)
      (setq pdf-view-midnight-colors '("#839496" . "#002b36" )) ; original values
      (pdf-view-midnight-minor-mode)
      )

    (defun bms/pdf-midnite-amber ()
      "Set pdf-view-midnight-colors to amber on dark slate blue."
      (interactive)
      (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; amber
      (pdf-view-midnight-minor-mode)
      )

    (defun bms/pdf-midnite-green ()
      "Set pdf-view-midnight-colors to green on black."
      (interactive)
      (setq pdf-view-midnight-colors '("#00B800" . "#000000" )) ; green
      (pdf-view-midnight-minor-mode)
      )

    (defun bms/pdf-midnite-colour-schemes ()
      "Midnight mode colour schemes bound to keys"
      (local-set-key (kbd "!") (quote bms/pdf-no-filter))
      (local-set-key (kbd "@") (quote bms/pdf-midnite-amber))
      (local-set-key (kbd "#") (quote bms/pdf-midnite-green))
      (local-set-key (kbd "$") (quote bms/pdf-midnite-original))
      )

    (add-hook 'pdf-view-mode-hook 'bms/pdf-midnite-colour-schemes)

    :ensure t)

    ;; cider-hydra
  ;;; at this time <2018-07-28 Sat> some 'requires' not working, so copy/paste from sources
  (defgroup cider-hydra nil
    "Hydras for CIDER."
    :prefix "cider-hydra-"
    :group 'cider)

  ;;;; Documentation

  (defhydra cider-hydra-doc (:color blue)
    "
  CIDER Documentation
  ---------------------------------------------------------------------------
  _d_: CiderDoc                           _j_: JavaDoc in browser
  _a_: Search symbols                     _s_: Search symbols & select
  _A_: Search documentation               _e_: Search documentation & select
  _r_: Grimoire                           _h_: Grimoire in browser
  "
    ;; CiderDoc
    ("d" cider-doc nil)
    ;; JavaDoc
    ("j" cider-javadoc nil)
    ;; Apropos
    ("a" cider-apropos nil)
    ("s" cider-apropos-select nil)
    ("A" cider-apropos-documentation nil)
    ("e" cider-apropos-documentation-select nil)
    ;; Grimoire
    ("r" cider-grimoire nil)
    ("h" cider-grimoire-web nil))


  ;;;; Loading and evaluation

  (defhydra cider-hydra-eval (:color blue)
    "
  CIDER Evaluation
  ---------------------------------------------------------------------------
  _k_: Load (eval) buffer                 _l_: Load (eval) file
  _p_: Load all project namespaces
  _r_: Eval region                        _n_: Eval ns form
  _e_: Eval last sexp                     _p_: Eval last sexp and pprint
  _w_: Eval last sexp and replace         _E_: Eval last sexp to REPL
  _d_: Eval defun at point                _f_: Eval defun at point and pprint
  _:_: Read and eval                      _i_: Inspect
  _m_: Macroexpand-1                      _M_: Macroexpand all
  "
    ;; Load
    ("k" cider-load-buffer nil)
    ("l" cider-load-file nil)
    ("p" cider-load-all-project-ns nil)
    ;; Eval
    ("r" cider-eval-region nil)
    ("n" cider-eval-ns-form nil)
    ("e" cider-eval-last-sexp nil)
    ("p" cider-pprint-eval-last-sexp nil)
    ("w" cider-eval-last-sexp-and-replace nil)
    ("E" cider-eval-last-sexp-to-repl nil)
    ("d" cider-eval-defun-at-point nil)
    ("f" cider-pprint-eval-defun-at-point nil)
    (":" cider-read-and-eval nil)
    ;; Inspect
    ("i" cider-inspect nil)
    ;; Macroexpand
    ("m" cider-macroexpand-1 nil)
    ("M" cider-macroexpand-all nil))

  ;;;; Testing and debugging

  (defhydra cider-hydra-test (:color blue)
    "
  CIDER Debug and Test
  ---------------------------------------------------------------------------
  _x_: Eval defun at point
  _v_: Toggle var tracing                 _n_: Toggle ns tracing
  _t_: Run test                           _l_: Run loaded tests
  _p_: Run project tests                  _r_: Rerun tests
  _s_: Show test report
  "
    ;; Debugging
    ("x" (lambda () (interactive) (cider-eval-defun-at-point t)) nil)
    ("v" cider-toggle-trace-var nil)
    ("n" cider-toggle-trace-ns nil)
    ;; Testing
    ("t" cider-test-run-test nil)
    ("l" cider-test-run-loaded-tests nil)
    ("r" cider-test-rerun-failed-tests nil)
    ("p" cider-test-run-project-tests nil)
    ("s" cider-test-show-report nil))


  ;;;; REPL

  (defhydra cider-hydra-repl (:color blue)
    "
  CIDER REPL
  ---------------------------------------------------------------------------
  _d_: Display connection info            _r_: Rotate default connection
  _z_: Switch to REPL                     _n_: Set REPL ns
  _p_: Insert last sexp in REPL           _x_: Reload namespaces
  _o_: Clear REPL output                  _O_: Clear entire REPL
  _b_: Interrupt pending evaluations      _Q_: Quit CIDER
  "
    ;; Connection
    ("d" cider-display-connection-info nil)
    ("r" cider-rotate-default-connection nil)
    ;; Input
    ("z" cider-switch-to-repl-buffer nil)
    ("n" cider-repl-set-ns nil)
    ("p" cider-insert-last-sexp-in-repl nil)
    ("x" cider-refresh nil)
    ;; Output
    ("o" cider-find-and-clear-repl-output nil)
    ("O" (lambda () (interactive) (cider-find-and-clear-repl-output t)) nil)
    ;; Interrupt/quit
    ("b" cider-interrupt nil)
    ("Q" cider-quit nil))

  
  ;;;; Key bindings and minor mode

  (defvar cider-hydra-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map cider-mode-map)
      (define-key map (kbd "C-c C-d") #'cider-hydra-doc/body)
      (define-key map (kbd "C-c C-t") #'cider-hydra-test/body)
      (define-key map (kbd "C-c C-M-e") #'cider-hydra-eval/body)
      (define-key map (kbd "C-c M-r") #'cider-hydra-repl/body)
      map)
    "Keymap for CIDER hydras.")

  ;;;###autoload
  (define-minor-mode cider-hydra-mode
    "Hydras for CIDER."
    :keymap cider-hydra-map
    :require 'cider)


  ;;;; ibuffer
  (defalias 'list-buffers 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (require 'ibuffer)
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "\\*.*helm.*\\*")
  (setq ibuffer-show-empty-filter-groups nil)

  ;; show human-size readable
  ;; https://www.emacswiki.org/emacs/IbufferMode

  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("clojure"
                  (or
                   (mode . clojure-mode)
                   ))
                 ("repl"
                  (mode . cider-repl-mode))
                 ;; ("                          web"
                 ;;  (or
                 ;;   (mode . html-mode)
                 ;;   (mode . js2-mode)
                 ;;   (mode . javascript-mode)
                 ;;   (mode . js-mode)
                 ;;   (mode . css-mode)
                 ;;   (mode . web-mode)
                 ;;   (mode . php-mode)
                 ;;   (mode . nxhtml-mode)
                 ;;   ))
                 ;; ("                         lisp"
                 ;;  (or
                 ;;   (mode . lisp-mode)
                 ;;   (mode . emacs-lisp-mode)
                 ;;   ))
                 ("org" ;; all org-related buffers
                  (or
                   (mode . org-mode)
                   ))
                 ("doc"
                  (or
                   (mode . eww-mode)
                   (mode . pdf-view-mode)))
                 ("dired"
                  (or
                   (mode . dired-mode)))
                 ("shell"
                  (or
                   (name . "^\\*eshell")
                   (name . "^\\*terminal")
                   (name . "^\\*zsh")
                   (name . "^\\*ansi-term")
                   (name . "^\\*Shell*")
                   ))
                 ("magit"
                  (or
                   (name . "^magit*")))
                 ("info"
                  (or
                   (name . "^\\*Messages\\*$")
                   (name . "^\\*Warnings\\*$")
                   (name . "^\\*Compile*")
                   (mode . Info-mode)
                   (mode . help-mode)))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))


  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; name column to 30 witdh
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 30 30 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)))

  ;; yasnippets
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    :ensure clojure-snippets
    :ensure t)

  (use-package yasnippet-snippets
    :ensure t
    :config
    (yasnippet-snippets-initialize))

  (use-package color-identifiers-mode
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-color-identifiers-mode))

  (use-package fic-mode
    :ensure t
    :config
    (setq fic-highlighted-words '("FIXME" "TODO" "BUG" "TEST" "NOTE" "HERE"))
    (add-hook 'prog-mode-hook 'fic-mode))

  (use-package git-gutter
    :ensure t
    :config
    (add-hook 'clojure-mode-hook 'git-gutter-mode))


  (use-package deft
    :ensure t
    :config (setq deft-directory "~/dev/computer/clojure/deft"
                  deft-default-extension "org"
                  deft-extensions '("org")
                  deft-use-filename-as-title t
                  deft-use-filter-string-for-filename t))

  (use-package eyebrowse
    :ensure t
    ;; :bind (("C-c C-w C-w" . eyebrowse-last-window-config)
    ;;        ("C-c C-w C-h" . eyebrowse-prev-window-config)
    ;;        ("C-c C-w C-l" . eyebrowse-next-window-config))
    :config
    (add-to-list 'window-persistent-parameters '(window-side . writable))
    (add-to-list 'window-persistent-parameters '(window-slot . writable))
    (set-face-attribute 'eyebrowse-mode-line-active nil :foreground "#d2691e" :weight 'bold)
    (set-face-attribute 'eyebrowse-mode-line-inactive nil :foreground "#000000")
    (setq eyebrowse-mode-line-separator " ")

    ;; poor solution, but works in this doom-mode-line version
    (doom-modeline-def-segment workspace-name
      "The current workspace name or number. Requires `eyebrowse-mode' to be enabled."
      (if (and (bound-and-true-p eyebrowse-mode)
               (< 1 (length (eyebrowse--get 'window-configs))))
          (let* ((num (eyebrowse--get 'current-slot))
                 (tag (when num (nth 2 (assoc num (eyebrowse--get 'window-configs)))))
                 (str (if (and tag (< 0 (length tag)))
                          tag
                        (when num (int-to-string num)))))
            (assq-delete-all 'eyebrowse-mode mode-line-misc-info)
            (propertize (format " %s" str) 'face
                        (if (doom-modeline--active)
                            'eyebrowse-mode-line-active
                          'eyebrowse-mode-line-inactive)))))


    (eyebrowse-mode t))

  (use-package hungry-delete
    :diminish hungry-delete-mode
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package swiper
    :ensure t)

  (use-package ivy :demand
    :ensure ivy-hydra
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    (ivy-mode 1))

  (use-package ivy-posframe
    :config
    (cl-defun my/window-size-change (&optional _)
    "My very own resize defun for modifying the posframe size"
    (unless (= (window-pixel-width-before-size-change) (window-pixel-width))
      (let ((body-width (window-body-width)))
        (set-variable 'ivy-posframe-width body-width)
        (set-variable 'ivy-posframe-min-width body-width)
        (set-variable 'which-key-posframe-width body-width)
        (set-variable 'which-key-posframe-min-width body-width))))

    (add-hook 'window-size-change-functions 'my/window-size-change)

    (setq ivy-posframe-parameters
          '((left-fringe . 8)
            (right-fringe . 8)))

    (setq ivy-posframe-display-functions-alist '( (t . ivy-posframe-display-at-frame-bottom-left)))
    (ivy-posframe-mode 1))

  (use-package counsel
    :ensure t)

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))

  (use-package bind-key
    :ensure t
    :config
    (bind-keys*
     ;; eyebrowse
     ("M-x" . counsel-M-x)
     ("C-c C-w C-w" . eyebrowse-last-window-config)
     ("C-c C-w C-j" . eyebrowse-prev-window-config)
     ("C-c C-w C-ñ" . eyebrowse-next-window-config)
     ("C-M-1" . eyebrowse-switch-to-window-config-1)
     ("C-M-2" . eyebrowse-switch-to-window-config-2)
     ("C-M-3" . eyebrowse-switch-to-window-config-3)
     ("C-M-4" . eyebrowse-switch-to-window-config-4)
     ;; swiper
     ("C-c f" . counsel-recentf)
     ("M-i" . swiper-isearch)
     ("M-g t" . counsel-org-goto)))

  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))
#+END_SRC
